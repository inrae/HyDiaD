CLFunc(Confid3, ConfTotal) + ggtitle("Confidence Level Ranked by Species Groups")
RankFunc <- function(name1, data4, name2){
name1 <- data4 %>%
group_by(Species) %>%
mutate_at("Response", as.numeric) %>%
summarize_at("Response", sum) %>%
arrange(Response)
RankCL <- as.vector(name1$Species)
return(RankCL)
}
CLRank <- RankFunc(name1 = Confid2, data4 = clres2, name2 = RankCL)
Confid4 <- clres2 %>%
drop_na(Response)
Confid4$Species <- factor(Confid4$Species, levels = CLRank)
Confid4$Response <- factor(Confid4$Response, levels = c("0", "25", "50", "75", "100"))
CLFunc(Confid4, ConfTotal) + ggtitle("Confidence Level Ranked by Total Value Low to High")
SppGrps <- c("Allis Shad","Twaite Shad","River Lamprey", "Sea Lamprey", "Sea Trout",
"Salmon", "Smelt", "Sturgeon","Flounder", "Mullet",  "Eel")
SppConf$Species <- factor(SppConf$Species, levels = SppGrps)
SppConf <- SppConf %>%
arrange(mean)
scrank <- as.vector(SppConf$Species)
SppConf <- SppConf %>%
arrange(factor(Species, levels = scrank))
ggplot(data = SppConf, aes(x = factor(Species, level = scrank), y = mean, fill = Species)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = lowerSE, ymax = upperSE), width = 0.2) +
ylim(0, 100) +
geom_text(aes(label = round(mean)), size = 6, vjust = 6) +
ggtitle("Mean and Standard Error of Confidence Levels (Black = Mean)") + #,
theme(legend.position = "none", axis.text.x = element_text(size = 18, angle = 75, vjust = 0.5, hjust = 0.5),
axis.title = element_text(size = 18), axis.text.y = element_text(size = 16),
title = element_text(size = 18)) +
xlab("Species") +
ylab("Mean of Confidence Levels (\U00B1 SE)")
temp3 <- c(3, 4, 6, 7)
temp4 <- c(5, 8)
temp5 <- c(temp3, temp4)
AllData <- df %>%
filter(Question %in% temp5) %>% #specify list of all quantitative questions
drop_na(Value) %>% # drop any instance where the participant did not answer one of the questions (which happened often)
mutate_at(c("Value", "CL"), as.numeric) %>%
mutate(mResponse = case_when(
Question == 4 ~ 1/Value, #question 4 was calculated differently as 1/response
Question != 4 ~ Value
)) %>%
mutate(
lResponse = case_when(
Question %in% temp3 ~ log(mResponse), #log-transform questions in list temp3
Question %in% temp4 ~ mResponse)) %>% #keep the rest of the questions untransformed (in list temp4)
mutate(ResxCon = mResponse * CL) %>%
mutate(CompResCon = lResponse * CL) #multiply indiviual response (log transformed as necessary) by individual CL
SumAllData <- AllData %>%
drop_na(ResxCon)%>%
filter(CL > 0) %>%
group_by(Question, Species) %>%
summarise_at(c("CL", "ResxCon", "CompResCon"
), sum) %>%
#mutate(WtAveNoneLog = ResxCon / CL) %>%
mutate(
WtAve = case_when(
Question %in% temp3 ~ (CompResCon / CL), #for questions on log scale, do not exponentiate yet
Question %in% temp4 ~ ResxCon / CL)) #for questions not on log scale, I shouldn't need this anymore b/c CompResCon is both logged and not logged
AllList <- list()
AllCnt <- list()
for(i in temp5){ #For each question in the list of quantitative questions defined above
temp6 <- AllData %>% #This is used to define the points in the figures
filter(Question == i) %>% #for each question
drop_na(ResxCon)%>% #drop NAs
filter(CL > 0) %>% #only include responses where the CL was > 0
count(Question, Species, CL, mResponse, name = "N") #Count the number of participants that gave the same CL and value for a question and species
temp8 <- AllData %>% #This is used to calculate the weighted mean and SD
filter(Question == i & CL > 0) %>%
count(Question, Species) #Count the total number of responses for each question and species
AllList[[i]] <- temp6
AllCnt[[i]] <- temp8
}
AllT <- inner_join(AllData, SumAllData, by = c("Question", "Species"))
N <- AllT %>%
filter(CL.x > 0) %>%
drop_na(Value) %>%
group_by(Species) %>%
count(Question, Species) %>%
mutate_at("n", as.numeric)
SumAllData2 <- inner_join(SumAllData, N, by = c("Question", "Species"))
SDSumLog <- function(i){
AllT %>%
filter(Question == i & CL.x > 0) %>%
drop_na(Value) %>%
group_by(Species) %>%
mutate(xma = (lResponse - (WtAve))^2) %>% #(xi - u*)^2
mutate(wxma = xma * CL.x, sqConf = (CL.x^2)) %>% #(wi * (xi - u*)^2)
summarise_at(c("wxma", "CL.x", "sqConf"), sum) %>%
mutate(SumConfsq = CL.x^2) %>%
mutate(Neff = SumConfsq / sqConf)
}
expfunc <- function(x){exp(x)}
SDfuncLog <- function(i, Q){
SumAllData %>%
filter(Question == i) %>%
inner_join(Q, SumAllData, by = c("Species")) %>%
mutate(S2 = (Neff/((Neff-1) *CL.x)) * wxma) %>%
mutate(S = (sqrt(S2/Neff))) %>%
mutate(upSD = exp(WtAve + S)) %>% #exponentiate upper and lower SD for final value
mutate(dnSD = exp(WtAve - S)) %>%
mutate_at("WtAve", expfunc) #exponentiate weigted average for final value
}
SDSumNoLog <- function(i){
AllT %>%
filter(Question == i & CL.x > 0) %>%
drop_na(Value) %>%
group_by(Species) %>%
mutate(xma = (mResponse - (WtAve))^2) %>% #(xi - u*)^2
mutate(wxma = xma * CL.x) %>% #(wi * (xi - u*)^2)
summarise_at(c("wxma", "CL.x"), sum) #sum wi*(xi-u*^2) and sum of wi
}
SDfuncNoLog <- function(i, Q){
SumAllData2 %>%
filter(Question == i) %>%
inner_join(Q, SumAllData, by = c("Species")) %>%
mutate(S2 = (n/((n-1) *CL.x)) * wxma) %>%
mutate(S = (sqrt(S2))) %>%
mutate(upSD = (WtAve + S)) %>%
mutate(dnSD = (WtAve - S))
}
Q4 <- SDSumLog(4)
Q42 <- SDfuncLog(4, Q4)
Q4Spp <- Q42 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ4 <- as.vector(Q4Spp$Species)
AllList[[4]]$Species <- factor(AllList[[4]]$Species, levels = RankQ4 )
AllCnt[[4]]$Species <- factor(AllCnt[[4]]$Species, levels = RankQ4)
Q42$Species <- factor(Q42$Species, levels = RankQ4)
QuantFigLogScale(AllList[[4]], Q42, AllCnt[[4]]) + ggtitle("Natural Survival (1 adult / N eggs)")
source("QuantFigNotLog.R")
source("QuantFigLogScale.R")
SDSumLog <- function(i){
AllT %>%
filter(Question == i & CL.x > 0) %>%
drop_na(Value) %>%
group_by(Species) %>%
mutate(xma = (lResponse - (WtAve))^2) %>% #(xi - u*)^2
mutate(wxma = xma * CL.x, sqConf = (CL.x^2)) %>% #(wi * (xi - u*)^2)
summarise_at(c("wxma", "CL.x", "sqConf"), sum) %>%
mutate(SumConfsq = CL.x^2) %>%
mutate(Neff = SumConfsq / sqConf)
}
expfunc <- function(x){exp(x)}
SDfuncLog <- function(i, Q){
SumAllData %>%
filter(Question == i) %>%
inner_join(Q, SumAllData, by = c("Species")) %>%
mutate(S2 = (Neff/((Neff-1) *CL.x)) * wxma) %>%
mutate(S = (sqrt(S2/Neff))) %>%
mutate(upSD = exp(WtAve + S)) %>% #exponentiate upper and lower SD for final value
mutate(dnSD = exp(WtAve - S)) %>%
mutate_at("WtAve", expfunc) #exponentiate weigted average for final value
}
SDSumNoLog <- function(i){
AllT %>%
filter(Question == i & CL.x > 0) %>%
drop_na(Value) %>%
group_by(Species) %>%
mutate(xma = (mResponse - (WtAve))^2) %>% #(xi - u*)^2
mutate(wxma = xma * CL.x) %>% #(wi * (xi - u*)^2)
summarise_at(c("wxma", "CL.x"), sum) #sum wi*(xi-u*^2) and sum of wi
}
SDfuncNoLog <- function(i, Q){
SumAllData2 %>%
filter(Question == i) %>%
inner_join(Q, SumAllData, by = c("Species")) %>%
mutate(S2 = (n/((n-1) *CL.x)) * wxma) %>%
mutate(S = (sqrt(S2))) %>%
mutate(upSD = (WtAve + S)) %>%
mutate(dnSD = (WtAve - S))
}
Q4 <- SDSumLog(4)
Q42 <- SDfuncLog(4, Q4)
Q4Spp <- Q42 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ4 <- as.vector(Q4Spp$Species)
AllList[[4]]$Species <- factor(AllList[[4]]$Species, levels = RankQ4 )
AllCnt[[4]]$Species <- factor(AllCnt[[4]]$Species, levels = RankQ4)
Q42$Species <- factor(Q42$Species, levels = RankQ4)
QuantFigLogScale(AllList[[4]], Q42, AllCnt[[4]]) + ggtitle("Natural Survival (1 adult / N eggs)")
View(Q42)
Q42 <- data.frame(Q42)
Q5 <- SDSumNoLog(5)
Q52 <- SDfuncNoLog(5, Q5)
Q5Spp <- Q52 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ5 <- as.vector(Q5Spp$Species)
AllList[[5]]$Species <- factor(AllList[[5]]$Species, levels = RankQ5)
AllCnt[[5]]$Species <- factor(AllCnt[[5]]$Species, levels = RankQ5)
Q52$Species <- factor(Q52$Species, levels = RankQ5)
QuantFigNotLog(AllList[[5]], Q52, AllCnt[[5]]) + ggtitle("Proportion of emigrant fish (%)") +
scale_x_continuous(breaks = c(5, 10, 20, 50, 80, 90, 95, 100)) +
theme(axis.text.x = element_text(size = 15, angle = 90, hjust = 0.5, vjust = 0.5))
source("QuantFigLogScale.R")
QuantFigNotLog(AllList[[5]], Q52, AllCnt[[5]]) + ggtitle("Proportion of emigrant fish (%)") +
scale_x_continuous(breaks = c(5, 10, 20, 50, 80, 90, 95, 100)) +
theme(axis.text.x = element_text(size = 15, angle = 90, hjust = 0.5, vjust = 0.5))
source("QuantFigLogScale.R")
QuantFigNotLog(AllList[[5]], Q52, AllCnt[[5]]) + ggtitle("Proportion of emigrant fish (%)") +
scale_x_continuous(breaks = c(5, 10, 20, 50, 80, 90, 95, 100)) +
theme(axis.text.x = element_text(size = 15, angle = 90, hjust = 0.5, vjust = 0.5))
source("QuantFigLogScale.R")
source("QuantFigNotLog.R")
QuantFigNotLog(AllList[[5]], Q52, AllCnt[[5]]) + ggtitle("Proportion of emigrant fish (%)") +
scale_x_continuous(breaks = c(5, 10, 20, 50, 80, 90, 95, 100)) +
theme(axis.text.x = element_text(size = 15, angle = 90, hjust = 0.5, vjust = 0.5))
Q52 <- data.frame(Q52)
Q6 <- SDSumLog(6)
Q62 <- SDfuncLog(6, Q6)
Q6Spp <- Q62 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ6 <- as.vector(Q6Spp$Species)
AllList[[6]]$Species <- factor(AllList[[6]]$Species, levels = RankQ6)
AllCnt[[6]]$Species <- factor(AllCnt[[6]]$Species, levels = RankQ6)
Q62$Species <- factor(Q62$Species, levels = RankQ6)
QuantFigLogScale(data1 = AllList[[6]], data2 = Q62,
data3 = AllCnt[[6]]) + ggtitle("Mean distance emigrant disperses (km)") +
scale_x_continuous(trans = "log10",
breaks = c(1, 10, 100, 1000),
labels = c("1", "10", "100", "1 000"))
Q7 <- SDSumLog(7)
Q72 <- SDfuncLog(7, Q7)
Q7Spp <- Q72 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ7 <- as.vector(Q7Spp$Species)
AllList[[7]]$Species <- factor(AllList[[7]]$Species, levels = RankQ7)
AllCnt[[7]]$Species <- factor(AllCnt[[7]]$Species, levels = RankQ7)
Q72$Species <- factor(Q72$Species, levels = RankQ7)
QuantFigLogScale(AllList[[7]], Q72, AllCnt[[7]]) + ggtitle("Max distance emigrant disperses (km)") +
scale_x_continuous(trans = "log10",
breaks = c(10, 100, 1000, 2500),
labels = c("10", "100", "1 000", "> 1 000"))
Diff6 <- Q62 %>%
select(Question, Species, WtAve, upSD, dnSD)
Diff7 <- Q72 %>%
select(Question, Species, WtAve, upSD, dnSD)
Diff67 <- inner_join(Diff6, Diff7, by = "Species") %>%
mutate(Diff = WtAve.y - WtAve.x) %>%
arrange(Diff)
ggplot() +
geom_col(data = Diff67, aes(x = Diff, y = Species, fill = Species), color = "black") +
geom_vline(data = Diff67, aes(xintercept = 0), lty = 3, col = "black", lwd = 1) +
theme(legend.position = "none", axis.text = element_text(size = 16), axis.title = element_text(size = 18)) +
xlab("Difference (Maximum - Mean distance)") + scale_color_viridis_d(option = "A")
Q8 <- SDSumNoLog(8)
Q82 <- SDfuncNoLog(8, Q8)
Q8Spp <- Q82 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ8 <- as.vector(Q8Spp$Species)
AllList[[8]]$Species <- factor(AllList[[8]]$Species, levels = RankQ8)
AllCnt[[8]]$Species <- factor(AllCnt[[8]]$Species, levels = RankQ8)
Q82$Species <- factor(Q82$Species, levels = RankQ8)
QuantFigNotLog(AllList[[8]], Q82, AllCnt[[8]]) + ggtitle("Emigrant survival (%)") +
scale_x_continuous(breaks = c(1, 10, 50, 90),
labels = c("1", "10", "50", "90"))
Q2 <- read.xlsx("Survey_response_Q2.xlsx", sheetIndex = 1, header = TRUE, as.data.frame = TRUE,
colClasses = (Response = "character"), stringsAsFactors = FALSE)
clq2 <- read.xlsx("Survey_response_Q2.xlsx", sheetIndex = 2, header = TRUE, as.data.frame = TRUE,
colClasses = (Response = "character"), stringsAsFactors = FALSE)
ResultsQ2 <- gather(Q2, Person, Response, AW:RK)
DQ2 <- ResultsQ2 %>%
filter(Category == "Density")
clq2 <- gather(clq2, Person, Response, DJ:RK)
clq2 <- clq2 %>%
drop_na(Species) %>%
replace_na(list(Response = 0)) %>%
rename_at("Response", ~"Conf")
SurResp <- inner_join(DQ2, clq2, by = c("Species", "Person"))
AllDataQ2 <- SurResp %>%
drop_na(Response) %>%
mutate_at(c("Response", "Conf"), as.numeric) %>%
mutate(lResponse = log(Response)) %>%
mutate(ResxCon = lResponse * Conf)
SumAllDataQ2<- AllDataQ2 %>%
drop_na(ResxCon)%>%
filter(Conf > 0) %>%
group_by(Species) %>%
summarise_at(c("Conf", "ResxCon"), sum) %>%
mutate(WtAve = ResxCon / Conf)
AllList2 <- AllDataQ2 %>%
drop_na(ResxCon)%>%
filter(Conf > 0) %>%
count(Species, Conf, Response, name = "N")
AllCnt2 <- AllDataQ2 %>%
filter(Conf > 0) %>%
count(Species)
AllT2 <- inner_join(AllDataQ2, SumAllDataQ2, by = "Species")
N2 <- AllT2 %>%
filter(Conf.x > 0) %>%
drop_na(Response) %>%
group_by(Species) %>%
count(Species) %>%
mutate_at("n", as.numeric)
SumAllDataQ22 <- inner_join(SumAllDataQ2, N2, by = c("Species"))
SDSumQ2 <- AllT2 %>%
filter(Conf.x > 0) %>%
drop_na(Response) %>%
group_by(Species) %>%
mutate(xma = (lResponse - (WtAve))^2) %>% #(xi - u*)^2
mutate(wxma = xma * Conf.x, sqConf = (Conf.x^2)) %>% #(wi * (xi - u*)^2)
summarise_at(c("wxma", "Conf.x", "sqConf"), sum) %>%
mutate(SumConfsq = Conf.x^2) %>%
mutate(Neff = SumConfsq / sqConf)
SDfuncQ2 <- SumAllDataQ22 %>%
inner_join(SDSumQ2, SumAllDataQ2, by = c("Species")) %>%
mutate(S2 = (Neff/((Neff-1) *Conf.x)) * wxma) %>%
mutate(S = (sqrt(S2/Neff))) %>%
mutate(upSD = exp(WtAve + S)) %>%
mutate(dnSD = exp(WtAve - S)) %>%
mutate_at("WtAve", expfunc)
Q2Spp <- SDfuncQ2 %>%
group_by(Species) %>%
arrange(WtAve)
RankQ2 <- as.vector(Q2Spp$Species)
AllList2$Species <- factor(AllList2$Species, levels = RankQ2)
AllCnt2$Species <- factor(AllCnt2$Species, levels = RankQ2)
SDfuncQ2$Species <- factor(SDfuncQ2$Species, levels = RankQ2)
Q2Fig <- function(data1, data2, data3){
lbls <- setNames(paste(unique(data2$Species), ";Total CL:", data2$Conf, ";N:", data3$n,
#"\nMean:", round(data2$WtAve), "+", round(data2$upSD), ",-", round(data2$dnSD),
#"SE"), unique(data2$Species))
"\nMean:", scientific(data2$WtAve, digits = 2), "+", scientific(data2$upSD, digits = 1),
",-", scientific(data2$dnSD, digits = 1),"SE"), unique(data2$Species))
ggplot() +
geom_point(data = data1, aes(x = Response, y = Conf, size = N, fill = N),
alpha = 0.5, shape = 21, color = "black", stroke = 1.5) +
geom_vline(data = data2, aes(xintercept = WtAve), lty = 2, col = "blue", lwd = 1) +
geom_rect(data = data2, aes(xmin = dnSD, xmax = upSD, ymin = 0, ymax = 100), color = "lightblue", alpha = 0.25) +
facet_wrap(~Species,
labeller = labeller(Species = setNames(unlist(lbls), unique(data1$Species)))) +
theme_bw() +
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 18),
title = element_text(size = 18), strip.text.x = element_text(size = 16)) +
ylim(0, 100) +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x)) +
scale_size_continuous(range = c(9, 12), breaks = pretty_breaks(4)) +
scale_fill_viridis(option = "D", breaks = pretty_breaks(4)) +
guides(fill = guide_legend(), size = guide_legend()) +
ylab("Confidence Level") +
xlab("Answer Response (log scale)")
}
Q2Fig(AllList2, SDfuncQ2, AllCnt2) + ggtitle("Maximum Density (fish / km2)")
SppList <- c("Allis Shad","Twaite Shad",
"River Lamprey", "Sea Lamprey",
"Sea Trout", "Salmon",
"Smelt", "Sturgeon",
"Flounder", "Mullet",  "Eel")
Q3SA <- read.xlsx("Survey_Response_Final.xlsx", sheetIndex = 3, header = TRUE, as.data.frame = TRUE,
colClasses = (Response = "character"), stringsAsFactors = FALSE)
Q3_values <- gather(Q3SA, Person, SA, DJ:PL)
Q3_values <- Q3_values %>%
select(Question, Species, Person, SA)
Q3_join <- inner_join(df, Q3_values, by = c("Question", "Species", "Person"))
Survey <- read.xlsx("Species_Results_Survey.xlsx", sheetIndex = 2, header = TRUE, as.data.frame = TRUE)
Dmax_values <- data.frame(Species2 = Survey$Lname, Dmax = Survey$Dmax,
Species = c("Allis Shad", "Twaite Shad", "River Lamprey",
"Flounder", "Salmon", "Sturgeon", "Eel", "Sea Trout",
"Sea Lamprey", "Smelt", "Mullet"))
df2 <- inner_join(Q3_join, Dmax_values, by = "Species")
Q3_indi <- df2 %>%
drop_na(Value) %>%
drop_na(SA) %>%
mutate_at(c("Value", "CL", "SA"), as.numeric) %>%
mutate(lambda = Value / (Dmax * SA)) %>%
mutate(loglambda = log(Value / (Dmax * SA))) %>%
mutate(LxCL = loglambda * CL)
str(Dmax_values)
Dmax_values$Dmax <- as.numeric(Dmax_values$Dmax)
df2 <- inner_join(Q3_join, Dmax_values, by = "Species")
Q3_indi <- df2 %>%
drop_na(Value) %>%
drop_na(SA) %>%
mutate_at(c("Value", "CL", "SA"), as.numeric) %>%
mutate(lambda = Value / (Dmax * SA)) %>%
mutate(loglambda = log(Value / (Dmax * SA))) %>%
mutate(LxCL = loglambda * CL)
expfunc <- function(x){exp(x)}
SumAllDataQ3<- Q3_indi %>%
filter(CL > 0) %>%
group_by(Species) %>%
summarise_at(c("CL", "LxCL"), sum) %>%
mutate(WtAve = LxCL / CL)
AllList3 <- Q3_indi %>%
filter(CL > 0) %>%
count(Species, CL, Value, name = "N")
AllCnt2 <- Q3_indi %>%
filter(CL > 0) %>%
count(Species)
AllT2 <- inner_join(Q3_indi, SumAllDataQ3, by = "Species")
N3 <- AllT2 %>%
group_by(Species) %>%
count(Species) %>%
mutate_at("n", as.numeric)
SumAllDataQ32 <- inner_join(SumAllDataQ3, N3, by = c("Species"))
SDSumQ3log <- AllT2 %>%
filter(CL.x > 0) %>%
group_by(Species) %>%
mutate(xma = (loglambda - (WtAve))^2) %>% #(xi - u*)^2
mutate(wxma = xma * CL.x, sqConf = (CL.x^2)) %>% #(wi * (xi - u*)^2)
summarise_at(c("wxma", "CL.x", "sqConf"), sum) %>%
mutate(SumConfsq = CL.x^2) %>%
mutate(Neff = SumConfsq / sqConf)
SumAllDataUseQ3 <-
inner_join(SDSumQ3log, SumAllDataQ32, by = c("Species")) %>%
mutate(S2 = (Neff/((Neff-1) *CL.x)) * wxma) %>%
mutate(S = (sqrt(S2/Neff))) %>%
mutate(upSD = exp(WtAve + S)) %>%
mutate(dnSD = exp(WtAve - S)) %>%
mutate_at("WtAve", expfunc)
Q32 <- data.frame(SumAllDataUseQ3)
lamValues <- inner_join(SumAllDataUseQ3, Dmax_values, by = "Species")
lamValues <- lamValues %>%
select(WtAve, Species2)
colnames(lamValues) <- c("AveLambda", "Lname")
Survey2 <- inner_join(Survey, lamValues, by = "Lname")
Q9 <- df %>%
filter(Question == 9) %>%
drop_na(Value, CL) %>%
group_by(Species, Value) %>%
mutate_at("CL", as.numeric) %>%
summarise_at("CL", sum)
Q9$Value <- factor(Q9$Value, levels = c("No preference", "Smaller", "Larger"))
Rank9 <- Q9 %>%
pivot_wider(names_from = Value, values_from = CL) %>%
mutate(Small2 = replace_na(Smaller, 0)) %>%
mutate(Diff = (Larger + Small2) - `No preference`) %>%
arrange(Diff)
Rank92 <- as.vector(Rank9$Species)
Rank9$Species <- factor(Rank9$Species, levels = Rank92)
FuncQ9 <- function(dataQ9){
ggplot(data = dataQ9, aes(x = Value, fill = Value, y = CL)) +
geom_col(position = "dodge", color = "black") +
facet_wrap(~Species) +
theme_bw() +
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 18),
title = element_text(size = 18), strip.text.x = element_text(size = 16), legend.position = "none") +
scale_fill_viridis_d(option = "E") +
ylab("Weighted Response (Sum of confidence levels)") +
xlab("Size") +
ggtitle("Size Preference of Catchment")
}
FuncQ9(Q9)
Q9Rank <- Q9
Tmp9Rank <- Q9Rank %>%
group_by(Species) %>%
summarize_at("CL", sum) %>%
arrange(CL)
Q9RankSpp <- as.vector(Tmp9Rank$Species)
Q9Rank$Species <- factor(Q9Rank$Species, levels = Q9RankSpp)
FuncQ9(Q9Rank) + ggtitle("Size Preference of Catchment Organized by Difference Between Size Choice and No Preference (Low to High)")
Q10 <- df %>%
filter(Question == 10) %>%
drop_na(CL) %>%
mutate(Response = replace_na(Value, "No answer")) %>%
group_by(Species, Response) %>%
mutate_at("CL", as.numeric) %>%
summarise_at("CL", sum)
Q10$Response <- factor(Q10$Response, levels = c("No answer", "No", "Yes"))
PlotQ10 <- function(data, x, fill, y){
ggplot(data = data, aes_string(x = x, fill = fill, y = y)) +
geom_col(position = "dodge", color = "black") +
facet_wrap(~Species) +
theme_bw() +
theme(legend.position = "none", axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
title = element_text(size = 18), strip.text.x = element_text(size = 16)) +
scale_fill_viridis_d(option = "E") +
ylab("Weighted Response (Sum of confidence levels)") +
xlab("Attraction") +
ggtitle("Attraction to Catchment with Conspecifics")
}
Q10RankYes <- Q10 %>%
group_by(Species) %>%
mutate(Total = sum(CL)) %>%
mutate(
Perc = case_when(
Response == "No" ~ CL / Total,
Response == "Yes" ~ CL / Total,
Response == "No answer" ~ CL / Total))
PlotQ10(Q10RankYes, "Response", "Response", "Perc") + ylab("Weighted Response (% of each category)")
Q10Rank <- Q10
Tmp10Rank <- Q10Rank %>%
group_by(Species) %>%
summarize_at("CL", sum) %>%
arrange(CL)
Q10RankSpp <- as.vector(Tmp10Rank$Species)
Q10Rank$Species <- factor(Q10Rank$Species, levels = Q10RankSpp)
PlotQ10(Q10Rank, "Response", "Response", "CL") +
ggtitle("Attraction to catchment with conspecifics, arranged by confidence level")
Rank10 <- Q10Rank %>%
pivot_wider(names_from = Response, values_from = CL) %>%
mutate(Diff = (Yes - No)) %>%
arrange(Diff)
Rank102 <- as.vector(Rank10$Species)
Q10Rank$Species <- factor(Q10Rank$Species, levels = Rank102)
PlotQ10(Q10Rank, "Response", "Response", "CL") +
ggtitle("Attraction to Catchment with Conspecifics, Arranged by Difference Between Yes and No (low to high)")
library(viridis)
library(scales)
114.21 / 56212.9
(114.21 + 457.59) / 56212.9
